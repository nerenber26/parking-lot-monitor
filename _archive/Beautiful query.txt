@app.route('/query', methods=['POST'])
def query_lot_occupancy():
    lot = request.form['lot']
    startdate = request.form['startdate']
    enddate = request.form['enddate']
    frequency = request.form['frequency']
    
    query = """
    WITH time_buckets AS (
        SELECT
            date_trunc(%s, timestamp) AS time_bucket,
            COUNT(*) AS occupied_spots
        FROM EventLog
        JOIN LoRaSensors ON EventLog.sensor_id = LoRaSensors.id
        JOIN ParkingLots ON LoRaSensors.lot_id = ParkingLots.id
        WHERE ParkingLots.lot_name = %s
          AND timestamp BETWEEN %s AND %s
        GROUP BY time_bucket
        ORDER BY time_bucket
    )
    SELECT time_bucket, occupied_spots
    FROM time_buckets;
    """
    
    params = (frequency, lot, startdate, enddate)
    cursor = db_connection.cursor()
    cursor.execute(query, params)
    results = cursor.fetchall()
    
    # Return results to frontend (as JSON or directly for graphing)
    return jsonify(results)



____________________________________________________________________________________
____________________________________________________________________________________
____________________________________________________________________________________
@app.route('/quick-view', methods=['GET'])
def quick_view():
    query = """
    WITH recent_events AS (
        SELECT
            ParkingLots.lot_name,
            COUNT(*) AS occupied_spots
        FROM EventLog
        JOIN LoRaSensors ON EventLog.sensor_id = LoRaSensors.id
        JOIN ParkingLots ON LoRaSensors.lot_id = ParkingLots.id
        WHERE timestamp >= NOW() - INTERVAL '5 minutes'
        GROUP BY ParkingLots.lot_name
        ORDER BY ParkingLots.lot_name
    )
    SELECT lot_name, COALESCE(occupied_spots, 0) AS occupied_spots
    FROM recent_events;
    """
    cursor = db_connection.cursor()
    cursor.execute(query)
    results = cursor.fetchall()
    
    # Convert results into a list of dictionaries for rendering
    occupancy_data = [{"lot_name": row[0], "occupied_spots": row[1]} for row in results]
    
    # Render the template with data
    return render_template('quick_view.pug', occupancy_data=occupancy_data)





